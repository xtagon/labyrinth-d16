; Labyrinth for DCPU-16
; =====================

; - Copyright 2012 Justin Workman <xtagon@gmail.com>
; - Inspired by Daniel Boswell's labyrnth.bas for QBasic
; - Implemented for DCPU-16 v1.7 specifications

SET PC, main

:display_hwi DAT 0 ; LEM1802 interupt address
:world_size DAT 8, 8 ; WIDTH, HEIGHT
:player_position DAT 1, 1 ; X, Y

; 0x00 - Empty Block
; 0x01 - Wall Block
:world_map
	DAT 0x0101, 0x0101, 0x0101, 0x0101
	DAT 0x0100, 0x0001, 0x0000, 0x0001
	DAT 0x0101, 0x0001, 0x0000, 0x0001
	DAT 0x0100, 0x0001, 0x0000, 0x0001
	DAT 0x0100, 0x0101, 0x0000, 0x0001
	DAT 0x0100, 0x0000, 0x0000, 0x0001
	DAT 0x0100, 0x0000, 0x0000, 0x0001
	DAT 0x0101, 0x0101, 0x0101, 0x0101

:font
	DAT 0x0000, 0x0000, 0x0000, 0x0000 ; Empty Block
	DAT 0x7F7F, 0x7F7F, 0x7F7F, 0x7F00 ; Wall Block

:main
	JSR detect_devices
	JSR init_display
	JSR render_radar
	SUB PC, 1

:detect_devices
	SET I, 0
	HWN J
:next_device
	HWQ I
	; Check for the LEM1802 display (0x7349F615)
	IFE A, 0xF615
	IFE B, 0x7349
		SET [display_hwi], I
	; Keep 'em comin'
	ADD I, 1
	IFN I, J
		SET PC, next_device
	SET PC, POP

:init_display
	JSR init_display_screen
	JSR init_display_font
	SET PC, POP

:init_display_screen
	SET A, 0
	SET B, 0x8000
	HWI [display_hwi]
	SET PC, POP

:init_display_font
	SET A, 1
	SET B, font
	HWI [display_hwi]
	SET PC, POP

:render_radar
	SET I, 0
:render_radar_next
	JSR render_radar_row
	ADD I, 1
	IFG 3, I
		SET PC, render_radar_next
	SET PC, POP

:render_radar_row
	SET J, 0
:render_radar_row_next
	JSR render_radar_block
	ADD J, 1
	IFG 3, J
		SET PC, render_radar_row_next
	SET PC, POP

:render_radar_block
	; Set X, Y to player position (on the map)
	SET X, [player_position]
	SET Y, [player_position + 1]
	; Translate X, Y to the block we want to draw
	SUB X, 1
	SUB Y, 1
	ADD X, J
	ADD Y, I
	; Get the block memory location on the map
	; X / 2 + Y * (WORLD_WIDTH / 2)
	SET Z, world_map
	SET A, X
	DIV A, 2
	ADD Z, A
	SET A, [world_size]
	DIV A, 2
	MUL A, Y
	ADD Z, A
	; Parse it into the octet that we want
	SET Z, [Z]
	SET A, X
	MOD A, 2
	IFE A, 1
		AND Z, 0x00FF
	AND Z, 0xFF00
	SHR Z, 8
	; Set A to the video address at which to start drawing
	; Remember, we're drawing two characters per block (8x8)
	SET A, 0x8000
	SET B, 2
	MUL B, J
	ADD A, B
	SET B, 32
	MUL B, I
	ADD A, B
	; Draw the left side of the block
	SET B, Z
	MUL B, 2
	BOR B, 0x7000
	SET [A], B
	; Draw the right side of the block
	ADD B, 1
	SET [A + 1], B
	; Phew, glad that's over with!
	SET PC, POP
